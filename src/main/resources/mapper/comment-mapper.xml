<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="f66.springboot_mvc_starter.repository.CommentRepository">

    <resultMap id="CommentWithRelations" type="CommentDTO" autoMapping="true">
        <id property="id" column="id"/>

        <association property="user" javaType="UserDTO">
            <id property="id" column="user_id"/>
            <result property="nickname" column="user_nickname"/>

            <association property="image" javaType="UserImageDTO">
                <result property="url" column="user_image_url"/>
            </association>

            <association property="role" javaType="UserRoleDTO">
                <result property="name" column="user_role_name"/>
            </association>
        </association>

        <association property="parentComment" javaType="CommentDTO">
            <id property="id" column="parent_comment_id"/>
            <association property="user" javaType="UserDTO">
                <result property="nickname" column="parent_comment_user_nickname"/>
            </association>
        </association>
    </resultMap>

    <insert id="insertComment"
            parameterType="CommentDTO" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO comments (content, user_id, article_id, parent_comment_id, depth)
        VALUES (#{content},
                #{userId},
                #{articleId},
                #{parentCommentId, jdbcType=BIGINT},
                CASE
                    WHEN #{parentCommentId, jdbcType=BIGINT} IS NULL THEN 0
                    ELSE
                        (SELECT depth + 1
                         FROM comments
                         WHERE id = #{parentCommentId, jdbcType=BIGINT})
                    END)
    </insert>

    <update id="updateComment"
            parameterType="CommentDTO">
        UPDATE comments
        SET content    = #{content},
            updated_at = now()
        WHERE id = #{id}
    </update>

    <update id="updateIsDeleted"
            parameterType="map">
        UPDATE comments
        SET is_deleted = #{isDeleted},
            updated_at = now()
        WHERE id = #{id}
    </update>

    <select id="selectCommentById"
            parameterType="map" resultType="CommentDTO">
        SELECT *
        FROM comments
        WHERE id = #{id}
    </select>

    <select id="selectCommentByIdAndUserId"
            parameterType="map" resultType="CommentDTO">
        SELECT *
        FROM comments
        WHERE id = #{id}
          AND user_id = #{userId}
    </select>

    <select id="selectCommentsWithRelationsByArticleId"
            parameterType="Long" resultMap="CommentWithRelations">
        WITH RECURSIVE comment_tree
                           AS
                           (SELECT c.id,
                                   c.content,
                                   c.created_at,
                                   c.updated_at,
                                   c.user_id,
                                   u.nickname            as "user_nickname",
                                   ui.url                as "user_image_url",
                                   ur.name               as "user_role_name",
                                   c.article_id,
                                   c.parent_comment_id,
                                   CAST(NULL AS varchar) as "parent_comment_user_nickname",
                                   c.depth,
                                   ARRAY [c.id]          AS path
                            FROM comments c
                                     JOIN users u ON c.user_id = u.id
                                     JOIN user_images ui on c.user_id = ui.user_id
                                     join user_roles ur on u.role_id = ur.id
                            WHERE c.parent_comment_id IS NULL
                              AND c.article_id = #{articleId}

                            UNION ALL

                            SELECT c.id,
                                   c.content,
                                   c.created_at,
                                   c.updated_at,
                                   c.user_id,
                                   u.nickname        as "user_nickname",
                                   ui.url            as "user_image_url",
                                   ur.name           as "user_role_name",
                                   c.article_id,
                                   c.parent_comment_id,
                                   parent_u.nickname as "parent_comment_user_nickname",
                                   ct.depth + 1,
                                   ct.path || c.id
                            FROM comments c
                                     JOIN comment_tree ct ON c.parent_comment_id = ct.id
                                     JOIN users u ON c.user_id = u.id
                                     join user_images ui on c.user_id = ui.user_id
                                     join user_roles ur on u.role_id = ur.id
                                     JOIN comments parent_comment ON c.parent_comment_id = parent_comment.id
                                     JOIN users parent_u ON parent_comment.user_id = parent_u.id)
        SELECT *
        FROM comment_tree
        ORDER BY path;
    </select>
</mapper>
