<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="f66.springboot_mvc_starter.repository.CommentRepository">

    <resultMap id="CommentWithRelations" type="CommentDTO" autoMapping="true">
        <id property="id" column="id"/>

        <association property="user" javaType="UserDTO">
            <id property="id" column="user_id"/>
            <result property="nickname" column="user_nickname"/>

            <association property="image" javaType="UserImageDTO">
                <id property="id" column="user_image_id"/>
                <result property="url" column="user_image_url"/>
            </association>

            <association property="role" javaType="UserRoleDTO">
                <result property="name" column="user_role_name"/>
            </association>
        </association>

        <association property="parentComment" javaType="CommentDTO">
            <id property="id" column="parent_comment_id"/>

            <association property="user" javaType="UserDTO">
                <result property="nickname" column="parent_comment_user_nickname"/>
            </association>
        </association>
    </resultMap>

    <insert id="insertComment"
            parameterType="CommentDTO" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO comments (content, depth, user_id, article_id, parent_comment_id)
        VALUES (#{content},
                CASE
                    WHEN #{parentCommentId, jdbcType=BIGINT} IS NULL THEN 0
                    ELSE
                        (SELECT depth + 1
                         FROM comments
                         WHERE id = #{parentCommentId, jdbcType=BIGINT})
                    END,
                #{userId},
                #{articleId},
                #{parentCommentId, jdbcType=BIGINT})
    </insert>

    <update id="updateComment"
            parameterType="CommentDTO">
        UPDATE comments
        SET content    = #{content},
            updated_at = now()
        WHERE id = #{id}
    </update>

    <update id="updateIsDeleted"
            parameterType="map">
        UPDATE comments
        SET is_deleted = #{isDeleted},
            deleted_at = now()
        WHERE id = #{id}
    </update>

    <select id="selectCommentById"
            parameterType="map" resultType="CommentDTO">
        SELECT *
        FROM comments
        WHERE id = #{id}
    </select>

    <select id="selectCommentByIdAndUserId"
            parameterType="map" resultType="CommentDTO">
        SELECT *
        FROM comments
        WHERE id = #{id}
          AND user_id = #{userId}
    </select>

    <select id="selectCommentsWithRelationsByArticleId"
            parameterType="Long" resultMap="CommentWithRelations">
        WITH RECURSIVE
            comment_tree AS (
                -- 기본 케이스 (최상위 댓글)
                SELECT c.*,
                       u.nickname    as "user_nickname",
                       ui.id         as "user_image_id",
                       ui.url        as "user_image_url",
                       ur.name       as "user_role_name",
                       NULL::varchar as "parent_comment_user_nickname",
                       ARRAY [c.id]  AS path
                FROM comments c
                         JOIN users u ON c.user_id = u.id
                         JOIN user_images ui ON u.id = ui.user_id
                         JOIN user_roles ur ON u.role_id = ur.id
                WHERE c.parent_comment_id IS NULL
                  AND c.article_id = #{articleId}

                UNION ALL

                -- 재귀 케이스 (자식 댓글)
                SELECT c.*,
                       u.nickname        as "user_nickname",
                       ui.id             as "user_image_id",
                       ui.url            as "user_image_url",
                       ur.name           as "user_role_name",
                       parent_u.nickname as "parent_comment_user_nickname",
                       ct.path || c.id
                FROM comments c
                         JOIN comment_tree ct ON c.parent_comment_id = ct.id
                         JOIN users u ON c.user_id = u.id
                         JOIN user_images ui ON u.id = ui.user_id
                         JOIN user_roles ur ON u.role_id = ur.id
                         JOIN users parent_u ON ct.user_id = parent_u.id),
            filtered_comments
                AS (SELECT ct.*,
                           EXISTS (SELECT 1
                                   FROM comment_tree child
                                   WHERE child.parent_comment_id = ct.id) as has_children
                    FROM comment_tree ct)
        SELECT *
        FROM filtered_comments
        WHERE NOT (is_deleted = true AND has_children = false)
        ORDER BY path;
    </select>
</mapper>
