<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="f66.springboot_mvc_starter.repository.UserRepository">

    <resultMap id="UserWithRelations" type="UserDTO" autoMapping="true">
        <id property="id" column="id"/>

        <association property="image" javaType="UserImageDTO">
            <id property="id" column="image_id"/>
            <result property="url" column="image_url"/>
            <result property="publicId" column="image_public_id"/>
        </association>

        <collection property="roles" ofType="RoleDTO">
            <id property="id" column="role_id"/>
            <result property="roleType" column="role_type"/>
            <result property="displayName" column="role_display_name"/>
        </collection>
    </resultMap>

    <insert id="insertUser"
            parameterType="UserDTO" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO users (username, nickname, password)
        VALUES (#{username}, #{nickname}, #{password})
    </insert>

    <insert id="insertUserRole"
            parameterType="map">
        INSERT INTO users_roles (user_id, role_id)
        VALUES (#{userId}, #{roleId})
    </insert>

    <update id="updateUser"
            parameterType="UserDTO">
        UPDATE users
        <set>
            <if test="nickname != null">nickname = #{nickname},</if>
            <if test="password != null">password = #{password},</if>
            updated_at = now()
        </set>
        WHERE id = #{id}
    </update>

    <select id="existsByUsername"
            parameterType="String" resultType="boolean">
        SELECT EXISTS (SELECT 1 FROM users WHERE username = #{value})
    </select>

    <select id="selectUserByUsername"
            parameterType="String" resultType="UserDTO">
        select *
        from users
        where username = #{username}
    </select>

    <select id="selectUserWithRelationsById"
            parameterType="Long" resultMap="UserWithRelations">
        SELECT u.*,
               ur.name      as "role_name",
               r.display_name  "role_displayName",
               ui.id        as "image_id",
               ui.url       as "image_url",
               ui.public_id as "image_public_id"
        FROM users u
                 JOIN users_roles ur on u.id = ur.user_id
                 JOIN roles r on ur.role_id = r.display_name
                 JOIN user_images ui on u.id = ui.user_id
        WHERE u.id = #{id}
    </select>

    <select id="selectUserWithRelationsByUsername"
            parameterType="String" resultMap="UserWithRelations">
        SELECT u.*,
               r.id           as "role_id",
               r.role_type    as "role_type",
               r.display_name as "role_displayName",
               ui.id          as "image_id",
               ui.url         as "image_url",
               ui.public_id   as "image_public_id"
        FROM users u
                 JOIN users_roles ur on u.id = ur.user_id
                 JOIN roles r on r.id = ur.role_id
                 JOIN user_images ui ON u.id = ui.user_id
        WHERE u.username = #{username}
    </select>

    <select id="selectUsers">
        select *
        from users
    </select>

    <select id="countUsers"
            resultType="long">
        select COUNT(id)
        from users
    </select>
</mapper>
