<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="f66.springboot_mvc_starter.repository.ArticleRepository">

    <resultMap id="ArticleWithRelations" type="ArticleDTO" autoMapping="true">
        <id property="id" column="id"/>

        <association property="user" javaType="UserDTO" autoMapping="true">
            <id property="id" column="user_id"/>

            <association property="image" javaType="UserImageDTO">
                <id property="id" column="user_image_id"/>
                <result property="url" column="user_image_url"/>
            </association>

            <collection property="roles" ofType="RoleDTO">
                <id property="id" column="role_id"/>
                <result property="roleType" column="role_type"/>
                <result property="displayName" column="role_displayName"/>
            </collection>
        </association>

        <association property="category" javaType="ArticleCategoryDTO">
            <id property="id" column="category_id"/>
            <result property="name" column="category_name"/>
        </association>
    </resultMap>

    <insert id="insertArticle"
            parameterType="ArticleDTO" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO articles (title, content, category_id, user_id)
        VALUES (#{title}, #{content}, #{categoryId}, #{userId})
    </insert>

    <update id="updateArticle"
            parameterType="ArticleDTO">
        UPDATE articles
        <set>
            <if test="title != null">title = #{title},</if>
            <if test="content != null">content = #{content},</if>
            <if test="categoryId != null">category_id = #{categoryId},</if>
            updated_at = now()
        </set>
        WHERE id = #{id}
    </update>

    <update id="updateCommentCount"
            parameterType="map">
        UPDATE articles
        SET comment_count = comment_count + #{delta}
        WHERE id = #{id}
    </update>

    <update id="updateIsDeleted"
            parameterType="map">
        UPDATE articles
        SET is_deleted = #{isDeleted},
            updated_at = now()
        WHERE id = #{id}
    </update>

    <select id="selectArticleById"
            parameterType="Long" resultType="ArticleDTO">
        SELECT *
        FROM articles
        WHERE id = #{id}
            FOR UPDATE
    </select>

    <select id="selectArticleByIdAndUserId"
            parameterType="map" resultType="ArticleDTO">
        SELECT *
        FROM articles
        WHERE id = #{id}
          AND user_id = #{userId}
    </select>

    <select id="selectArticleWithRelationsByIdAndOptionalUserId"
            parameterType="map" resultMap="ArticleWithRelations">
        SELECT
        a.*,
        u.*,
        ui.id as "user_image_id",
        ui.url as "user_image_url",
        r.id as "rold_id",
        r.role_type as "role_type",
        r.display_name as "role_displayName",
        ac.id as "category_id",
        ac.name as "category_name",
        <if test="currentUserId != null">
            av.is_active
        </if>
        <if test="currentUserId == null">
            false
        </if>
        AS voted
        FROM articles a
        JOIN users u ON a.user_id = u.id
        JOIN user_images ui ON a.user_id = ui.user_id
        JOIN users_roles ur ON u.id = ur.user_id
        JOIN roles r ON r.id = ur.role_id
        JOIN article_categories ac ON a.category_id = ac.id
        <if test="currentUserId != null">
            LEFT JOIN article_votes av ON a.id = av.article_id AND av.user_id = #{currentUserId}
        </if>
        WHERE a.id = #{id}
        and a.is_deleted = false
    </select>

    <select id="selectListForPage"
            parameterType="ArticlePageRequest" resultMap="ArticleWithRelations">
        SELECT
        a.*,
        u.*,
        ui.id as "user_image_id",
        ui.url as "user_image_url",
        r.id as "rold_id",
        r.role_type as "role_type",
        r.display_name as "role_displayName",
        ac.id as "category_id",
        ac.name as "category_name"
        FROM articles a
        JOIN users u ON a.user_id = u.id
        JOIN user_images ui ON a.user_id = ui.user_id
        JOIN users_roles ur ON u.id = ur.user_id
        JOIN roles r ON r.id = ur.role_id
        JOIN article_categories ac ON a.category_id = ac.id
        <include refid="articlePageConditions"/>
        ORDER BY
        <choose>
            <when test="order == 'id_desc'">a.id DESC</when>
            <when test="order == 'id_asc'">a.id ASC</when>
            <when test="order == 'comment_count_asc'">
                a.comment_count DESC,
                a.id ASC
            </when>
            <when test="order == 'vote_count_asc'">
                a.vote_count DESC,
                a.id ASC
            </when>
            <otherwise>a.id DESC</otherwise>
        </choose>
        LIMIT #{size} OFFSET #{offset}
    </select>

    <select id="countForPage"
            parameterType="ArticlePageRequest" resultType="long">
        SELECT COUNT(a.id)
        FROM articles a
        <if test="searchKey == 'nickname'">
            JOIN users u ON a.user_id = u.id
        </if>
        <include refid="articlePageConditions"/>
    </select>

    <sql id="articlePageConditions">
        <where>
            a.is_deleted = false
            <if test="userId != null">
                AND a.user_id = #{userId}
            </if>
            <if test="userId == null">
                <if test="searchKey == 'title' or searchKey == 'content' or searchKey == 'nickname' and searchValue != null">
                    AND
                    <choose>
                        <when test="searchKey == 'title'.toString()">
                            a.title LIKE CONCAT('%', #{searchValue}, '%')
                        </when>
                        <when test="searchKey == 'content'.toString()">
                            a.content LIKE CONCAT('%', #{searchValue}, '%')
                        </when>
                        <when test="searchKey == 'nickname'.toString()">
                            u.nickname LIKE CONCAT('%', #{searchValue}, '%')
                        </when>
                    </choose>
                </if>
                <if test="categoryId != null and categoryId != 0">
                    AND a.category_id = #{categoryId}
                </if>
            </if>
        </where>
    </sql>

</mapper>
